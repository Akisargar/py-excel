diff --git a/google_analytics.module b/google_analytics.module
index e31ae632..5d0564ac 100644
--- a/google_analytics.module
+++ b/google_analytics.module
@@ -16,6 +16,7 @@
 use Drupal\Core\Url;
 use Drupal\google_analytics\Event\GoogleAnalyticsConfigEvent;
 use Drupal\google_analytics\Event\GoogleAnalyticsEventsEvent;
+use Drupal\google_analytics\GaAccount;
 use Drupal\google_analytics\GaJavascriptObject;
 use Drupal\google_analytics\Constants\GoogleAnalyticsEvents;
 use Drupal\google_analytics\Component\Render\GoogleAnalyticsJavaScriptSnippet;
@@ -84,7 +85,7 @@ function google_analytics_page_attachments(array &$page) {
   // 3. Check if we should track the currently active user's role.
   // 4. Ignore pages visibility filter for 404 or 403 status codes.
   if ($ga_accounts->getDefaultMeasurementId() && ($visibilityTracker->getVisibilityPages() || in_array($status, $trackable_status_codes)) && $visibilityTracker->getUserVisibilty($account)) {
-    $default_id = $ga_accounts->getDefaultMeasurementId();
+    $default_id = _get_region_specific_account();
     // Init variables.
     $debug = $config->get('debug');
     $url_custom = '';
@@ -155,32 +156,30 @@ function google_analytics_page_attachments(array &$page) {
     if (!empty($codesnippet_before)) {
       $script .= $codesnippet_before;
     }
+    $account = _get_region_specific_account();
+    // Create a config for language-specific account.
+    $ga_config = new GoogleAnalyticsConfigEvent($javascript, $account);

-    // Create a config for each account.
-    foreach($ga_accounts->getAccounts() as $account) {
-      $ga_config = new GoogleAnalyticsConfigEvent($javascript, $account);
-
-      // Get the event_dispatcher service and dispatch the event.
-      $event_dispatcher = \Drupal::service('event_dispatcher');
-      $event_dispatcher->dispatch($ga_config, GoogleAnalyticsEvents::ADD_CONFIG);
-
-      // Json::encode() cannot convert custom URLs properly.
-      $config_array = $ga_config->getConfig();
-      $path = '';
-      $path_type = '';
-      if (isset($config_array['page'])) {
-        $path_type = substr($config_array['page_placeholder'], strlen('PLACEHOLDER_'));
-        $path = $config_array['page'];
-        $config_array[$path_type] = $config_array['page_placeholder'];
-        unset($config_array['page']);
-        unset($config_array['page_placeholder']);
-      }
-      $arguments_json = Json::encode($config_array);
-      $arguments_json = str_replace('"PLACEHOLDER_'.$path_type.'"', $path, $arguments_json);
+    // Get the event_dispatcher service and dispatch the event.
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+    $event_dispatcher->dispatch($ga_config, GoogleAnalyticsEvents::ADD_CONFIG);
+
+    // Json::encode() cannot convert custom URLs properly.
+    $config_array = $ga_config->getConfig();
+    $path = '';
+    $path_type = '';
+    if (isset($config_array['page'])) {
+      $path_type = substr($config_array['page_placeholder'], strlen('PLACEHOLDER_'));
+      $path = $config_array['page'];
+      $config_array[$path_type] = $config_array['page_placeholder'];
+      unset($config_array['page']);
+      unset($config_array['page_placeholder']);
+    }
+    $arguments_json = Json::encode($config_array);
+    $arguments_json = str_replace('"PLACEHOLDER_'.$path_type.'"', $path, $arguments_json);


-      $script .= 'gtag("config", ' . Json::encode((string)$account) . ', ' . $arguments_json . ');';
-    }
+    $script .= 'gtag("config", ' . Json::encode((string)$account) . ', ' . $arguments_json . ');';


     $ga_events = new GoogleAnalyticsEventsEvent($javascript);
@@ -224,6 +223,17 @@ function google_analytics_page_attachments(array &$page) {
   }
 }

+/**
+ * The function is for getting the region specific GA Account.
+ *
+ * @return mixed
+ */
+function _get_region_specific_account(): mixed {
+    $language = \Drupal::languageManager()->getCurrentLanguage()->getName();
+    $config = \Drupal::service('config.factory')->get('millboard_google_analytics.settings');
+    return new GaAccount($config->get('google_analytics_id')[$language]);
+}
+
 /**
  * Implements hook_entity_extra_field_info().
  */
@@ -343,5 +353,3 @@ function google_analytics_preprocess_item_list__search_results(&$variables) {
     ];
   }
 }
-
-
